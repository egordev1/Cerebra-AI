#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è Cerebra AI
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import torch
from cerebra import Cerebra
try:
    from cerebra.models.main_model import SynthesisL1
except ImportError:
    SynthesisL1 = None

def test_model_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
    print("üß™ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏...")
    if SynthesisL1:
        model = SynthesisL1()
        assert model.model_id == "Synthesis-L1"
        assert hasattr(model, 'forward') or hasattr(model, 'process')
        print("‚úÖ –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è  SynthesisL1 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

def test_core_functionality():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    print("üß™ –¢–µ—Å—Ç —è–¥—Ä–∞ —Å–∏—Å—Ç–µ–º—ã...")
    cerebra = Cerebra()
    model = cerebra.load_model("Synthesis-L1")
    assert model is not None
    print("‚úÖ –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_text_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞...")
    if SynthesisL1:
        model = SynthesisL1()
        response = model.process("—Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        assert isinstance(response, str)
        assert len(response) > 0
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ö†Ô∏è  SynthesisL1 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

def test_model_info():
    """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
    print("üß™ –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏...")
    if SynthesisL1:
        model = SynthesisL1()
        info = model.get_info()
        assert 'parameters' in info
        assert info['parameters'] > 0
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞")
    else:
        print("‚ö†Ô∏è  SynthesisL1 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

if __name__ == "__main__":
    test_model_initialization()
    test_core_functionality()
    test_text_processing()
    test_model_info()
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")