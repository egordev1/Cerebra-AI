import torch
import os

class Cerebra:
    def __init__(self):
        self.name = "Cerebra"
        self.version = "1.0.0"
        self.active_model = None
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        
        print(f"üß† –ó–∞–ø—É—â–µ–Ω–∞ {self.name} AI System")
        print(f"üìä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
    
    def load_model(self, model_name="Synthesis-L1"):
        if model_name == "Synthesis-L1":
            from .models.language import SynthesisL1
            self.active_model = SynthesisL1().to(self.device)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
        else:
            print(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        return self.active_model
    
    def chat(self, message):
        if not self.active_model:
            return "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å: ai.load_model()"
        return self.active_model.process(message)
    
    def real_training(self, epochs=5):
        if not self.active_model:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏")
            return False
        
        try:
            if hasattr(self.active_model, 'real_train'):
                print(f"üöÄ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ {epochs} —ç–ø–æ—Ö...")
                success = self.active_model.real_train(epochs=epochs)
                
                if success:
                    print("üéâ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
                    test_texts = ["–∫–∞–∫ –¥–µ–ª–∞", "–≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "—Ö–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞"]
                    print("\nüß™ –¢–µ—Å—Ç –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è:")
                    for text in test_texts:
                        response = self.chat(text)
                        print(f"   '{text}' -> {response}")
                return success
            else:
                print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def save_model(self, path="models/synthesis_l1.pth"):
        if not self.active_model:
            print("‚ùå –ù–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False
        
        os.makedirs(os.path.dirname(path), exist_ok=True)
        torch.save(self.active_model.state_dict(), path)
        print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {path}")
        return True
    
    def info(self):
        info_text = f"""
üß† {self.name} AI System v{self.version}
üìä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:
‚Ä¢ Synthesis-L1 - —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
‚Ä¢ Synthesis-L2 - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
‚Ä¢ Synthesis-L3 - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
"""
        if self.active_model:
            model_info = self.active_model.get_info()
            info_text += f"\nüéØ –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {model_info['model_id']}"
            info_text += f"\nüìà –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {model_info['parameters']:,}"
        
        return info_text